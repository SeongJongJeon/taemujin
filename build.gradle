import org.apache.tools.ant.filters.ReplaceTokens

def environment = hasProperty('env') ? env : 'local'
def mavenPrefixUrl = ''
def mavenUser = ''
def mavenPwd = ''

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
    }
}

def generateEnvValue(values) {
    def value = ''
    if (values.size() < 2) {
        return value
    } else {
        def i = 0
        values.each {
            if (i > 0) {
                value += "${it}="
            }
            i++;
        }
        value.substring(0, value.size() - 1)
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'eclipse'
    apply plugin: 'io.spring.dependency-management'

    group 'com.taemujin'
    version = '0.0.1'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    /*test {
        minHeapSize = '1g'
        maxHeapSize = '1g'
        jvmArgs '-XX:+UseG1GC'
        maxParallelForks = 5
    }*/

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
    }

    //아래 항목이 없으면 intellij에서 따로 ouput 디렉토리를 생성해서 변경된 properties 파일이 적용안됨
    idea {
        module {
            inheritOutputDirs = false
            outputDir = file("$buildDir/classes/main/")
            testOutputDir = file("$buildDir/classes/test")
        }
    }

    /**
     * 2017.2 버젼부터 Intellij 는 Gradle의 output 디렉토리를 공유하지 않는다.
     * 빌드시 filter 를 적용하여 properties 파일들의 값을 replace 하여 사용해야 하는 경우 문제가 발생하여 아래와 같이 빌드시 디렉토리를 intellij 디렉토리로 변경해 준다.
     * 혹은 설정 > Build, Execution, Deployment > Gradle > Runner > Deletegate IDE build/run actions to gradle 와 같이 체크하여 사용할 수 있음.
     * 하지만 재 빌드를 하면 test case 가 수행됨. (spring boot reload 를 사용하는 것보다 ide의 기능을 사용하는 것이 더 빠름)
     */
    if (project.convention.findPlugin(JavaPluginConvention)) {
        sourceSets.main.java.outputDir = new File(buildDir, "classes/main")
        sourceSets.main.output.resourcesDir = new File(buildDir, "classes/main")
        sourceSets.test.java.outputDir = new File(buildDir, "classes/test")
        sourceSets.test.output.resourcesDir = new File(buildDir, "classes/test")
    }

    configurations { providedCompile }

    sourceSets.main.compileClasspath += configurations.providedCompile
    sourceSets.test.compileClasspath += configurations.providedCompile
    sourceSets.test.runtimeClasspath += configurations.providedCompile

    sourceSets {
        main {
            resources {
                srcDirs = ["src/main/config", "src/main/resources"]
                includes = ["**/*"]
            }
        }
    }

    processResources {
        File coreFile = new File("${project.getRootDir().path}/core/src/main/filters/${environment}.properties")
        File file = new File("${project.projectDir.path}/src/main/filters/${environment}.properties")
        println(environment);
        def tokens = new HashMap();
        if (coreFile.exists()) {
            coreFile.eachLine { line ->
                def values = line.tokenize("=")
                if (!"".equals(line) && !values[0].startsWith("#") && "env".equals(values[0])) {
                    tokens.put(values[0], generateEnvValue(values))
                }
            }
        }

        if (file.exists()) {
            file.eachLine { line ->
                def values = line.tokenize("=")
                if (!"".equals(line) && !values[0].startsWith("#")) {
                    tokens.put(values[0], generateEnvValue(values))

                }
            }
        }

        println "${project.getName()} - ${tokens} - ${environment}"
        filesMatching('**/*.properties') {
            filter ReplaceTokens, tokens: tokens
        }
        filesMatching('**/logback.xml') {
            filter ReplaceTokens, tokens: tokens
        }

        /*doLast {
            sleep(1 * 1000)
            copy {
                from('build/resources/main')
                into('build/classes/main')
            }
        }*/
    }

    repositories {
        mavenCentral()
    }

    buildscript {
        repositories {
            jcenter()
            maven { url "https://repo.spring.io/snapshot" }
            maven { url "https://repo.spring.io/milestone" }

        }

        project.ext {
            springBootVersion = '1.5.8.RELEASE'
        }
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:1.5.8.RELEASE")
        }
    }

    dependencies {
        def slf4jVersion = '1.7.25'
        def excelVersion = '3.16'
        def logbackVersion = '1.2.3'

        /* Logging */
        compile "org.slf4j:log4j-over-slf4j:$slf4jVersion"
        compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
        compile "org.slf4j:jul-to-slf4j:$slf4jVersion"
        compile "ch.qos.logback:logback-core:$logbackVersion"
        compile "ch.qos.logback:logback-classic:$logbackVersion"
        compile "org.codehaus.janino:janino:3.0.7"
        compile "org.projectlombok:lombok:1.16.18"

        compile("commons-fileupload:commons-fileupload:1.3.3")
        compile("commons-io:commons-io:2.5")

        /* Excel */
        //2007년 이전 버젼
        compile("org.apache.poi:poi:$excelVersion")
        //2007년 이후 버젼
        compile("org.apache.poi:poi-ooxml:$excelVersion")
    }
}